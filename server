#!/bin/bash


SSH_USERNAME_=($(export | grep -o SSH_USERNAME_.*))
SSH_USERID_=($(export | grep -o SSH_USERID_.*))
SSH_DATADIR_NAME_=($(export | grep -o SSH_DATADIR_NAME_.*))
SSH_PASSWORD_=($(export | grep -o SSH_PASSWORD_.*))


if [ ${#SSH_USERNAME_[@]} -eq 0 ]; then
  echo "INFO: Username not set. Using default sftpuser"
declare -a SSH_USERNAME_=('SSH_USERNAME_1="sftpuser"')
  echo ${SSH_USERNAME_:16:-1}
fi


# Check if uid/guid is set
if [ ${#SSH_USERID_[@]} -eq 0 ]; then
echo "INFO: UID/GUID not set. Using default"
declare -a SSH_USERID_=(1337)
echo ${SSH_USERID_}
fi

# Check if datadir is set
if [ ${#SSH_DATADIR_NAME_[@]} -eq 0 ]; then
echo "INFO: Data dir not set. Using default"
declare -a  SSH_DATADIR_NAME_=('data')
echo ${SSH_DATADIR_NAME_}
fi

# Check if uid/guid is set
if [ ${#SSH_PASSWORD_[@]} -eq 0 ]; then
echo "INFO: No password has been set. disabling password login"
SSH_NO_PASSWORD=1
fi

# Check if generate hostkeys is set
if [ -z "$SSH_GENERATE_HOSTKEYS" ]; then
  echo "INFO: Generate hostkeys not set. Using default"
  SSH_GENERATE_HOSTKEYS="true"
fi

# Create group
echo "INFO: Adding group sftponly"
#addgroup -g $SSH_USERID $SSH_USERNAME
#addgroup sftponly

# Creating chroot and taking ownership
echo "INFO: Creating chroot and jail for the user"
mkdir /sftp/
chown root:root /sftp/


#checking password enablement
if [ "$SSH_NO_PASSWORD" == "1" ]; then
  echo "disabling password login"

else
  echo "enabling password login"
   sed -i "s/PasswordAuthentication\s[^ ]*/PasswordAuthentication yes/g" /etc/ssh/sshd_config
 fi


# Create user loop
for ((i=0;i<${#SSH_USERNAME_[@]};++i));

do
echo "INFO: Adding user ${SSH_USERNAME_:16:-1}"
echo "adduser -D -u ${SSH_USERID_} -h /${SSH_USERNAME_:16:-1} -G sftponly ${SSH_USERNAME_:16:-1}"
addgroup -g ${SSH_USERID_} ${SSH_USERNAME_:16:-1}
mkdir /sftp/${$SSH_USERNAME_:16:-1}
chown ${$SSH_USERNAME_:16:-1}:sftponly /sftp/${$SSH_USERNAME_:16:-1}
chmod 700 /sftp/${$SSH_USERNAME_:16:-1}
done

#checking password enablement
if [ "$SSH_NO_PASSWORD" == "0" ]; then
  echo "Setting passwords for users"
# Loop Set password if provided
for ((i=0;i<${#SSH_PASSWORD_[@]};++i));
do

echo ${$SSH_USERNAME_:16:-1}:${$SSH_PASSWORD_:14:-1} | chpasswd > /dev/null
done
else
  echo "not setting passwords for users"

fi


# Set Port to listen on
if [ ! -z "$SSH_PORT" ]; then
  echo "INFO: Setting Port to ${SSH_PORT}"
  sed -i "s/Port\s[^ ]*/Port ${SSH_PORT}/g" /etc/ssh/sshd_config
fi


############################################################
#Needs to be changed
#####################################


if [ -z $(ls /run/secrets/$SSH_USERNAME-*) ]; then
echo "No SSH secrets present"
else
        echo "placing Secret SSH Keys"


for ((i=0;i<${#SSH_USERNAME_[@]};++i));

do

mkdir -p /home/${$SSH_USERNAME_:16:-1}/.ssh/keys
   SSH_keys_secret=$(cd /run/secrets/ && ls ${$SSH_USERNAME_:16:-1}*)
   for SSH_SECRET in $SSH_keys_secret; do
   cat /run/secrets/$SSH_SECRET > /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/$SSH_SECRET.pub
   
  echo_key=$(cat /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/$SSH_SECRET.pub)
  echo $echo_key >> /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
   done
chown ${$SSH_USERNAME_:16:-1}:root /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
chmod 644  /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
fi


if [ -z "$SSH_KEY" ]; then
echo "No public keys as parameter for ${$SSH_USERNAME_:16:-1}"
else
echo "INFO: Placing key that is provided as variable for user ${$SSH_USERNAME_:16:-1}"


if [ -d /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys ]; then

  mkdir -p /home/${$SSH_USERNAME_:16:-1}/.ssh/keys
 echo $SSH_KEY > /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/${$SSH_USERNAME_:16:-1}-var.pub
echo "INFO: Set ownership and permission of .ssh directory"
  chown -R root:root /home/${$SSH_USERNAME_:16:-1}/.ssh
  chmod 755 /home/${$SSH_USERNAME_:16:-1}/.ssh
  echo_key=$(cat /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/$SSH_SECRET.pub)
  echo $echo_key >> /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
  chown ${$SSH_USERNAME_:16:-1}:root /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
  chmod 644 /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys


else
echo "also placing the environment key for user ${$SSH_USERNAME_:16:-1}"
echo $SSH_KEY >> /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/${$SSH_USERNAME_:16:-1}-var.pub
echo_key=$(cat /home/${$SSH_USERNAME_:16:-1}/.ssh/keys/${$SSH_USERNAME_:16:-1}-var.pub)
echo $echo_key >> /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
chown ${$SSH_USERNAME_:16:-1}:root /home/$SSH_USERNAME/.ssh/authorized_keys
chmod 644 /home/${$SSH_USERNAME_:16:-1}/.ssh/authorized_keys
fi
fi


# Generate host keys by default
if [ "${SSH_GENERATE_HOSTKEYS,,}" == "true" ]; then
  echo "INFO: Generating host keys"

  mkdir -p /etc/ssh/host_keys/

  ssh-keygen -f /etc/ssh/host_keys/ssh_host_rsa_key -q -N '' -t rsa
  ln -s /etc/ssh/host_keys/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key

  ssh-keygen -f /etc/ssh/host_keys/ssh_host_dsa_key -q -N '' -t dsa
  ln -s /etc/ssh/host_keys/ssh_host_dsa_key /etc/ssh/ssh_host_dsa_key

  ssh-keygen -f /etc/ssh/host_keys/ssh_host_ecdsa_key -q -N '' -t ecdsa
  ln -s /etc/ssh/host_keys/ssh_host_ecdsa_key /etc/ssh/ssh_host_ecdsa_key

  ssh-keygen -f /etc/ssh/host_keys/ssh_host_ed25519_key -q -N '' -t ed25519
  ln -s /etc/ssh/host_keys/ssh_host_ed25519_key /etc/ssh/ssh_host_ed25519_key
fi

echo "INFO: Setting permissions on host keys"
chmod 600 /etc/ssh/host_keys/*

# Check for loglevel and replace line in sshd_config
if [ -n "$LOGLEVEL" ]; then
  echo "INFO: Setting LogLevel to ${LOGLEVEL}"
  sed -i "s/LogLevel\s[^ ]*/LogLevel ${LOGLEVEL}/g" /etc/ssh/sshd_config
fi


# Run sshd in debug mode
if [ -z "$DEBUG" ]; then
        exec /usr/sbin/sshd -D -e
else
        echo "WARN: Debug mode enabled!"
        exec /usr/sbin/sshd -D -e -d
fi
